#include "archivo.h"
#include "alumno.h"
#include <iostream>
#include <cstdio>

using namespace std;

Archivo::Archivo(){
}

void Archivo::initialize(FILE *file){

    fseek( file, 0, SEEK_SET );

    int i;
    for( i = 0; i < 10; i++){
      // DELETE_CODE value is -1
      Alumno nullAlumni( DELETE_CODE, "nulo", 0.0, i+1);
      fwrite( &nullAlumni, sizeof(Alumno), 1, file);

    }
}

void Archivo:: searchAlumniInFile( FILE *file ){

    int alumniIndexToSearch;
    cout << "write a number between 1 and 10: ";
    cin >> alumniIndexToSearch;
    cout << "\n";

    //Beacuse the index begin in 0
    alumniIndexToSearch--;

    Alumno newAlumni;
    fseek( file, sizeof(Alumno)*alumniIndexToSearch, SEEK_SET ); //from the begining
    fread( &newAlumni, sizeof(Alumno), 1, file );

    bool isAlumniDeleted = newAlumni.getAlumniID() == DELETE_CODE;
    if ( isAlumniDeleted ){
        cout << "The register does not exist \n" << endl;
    }else{
        cout << "Alumni ID: " << newAlumni.getAlumniID() << endl;
        cout << "Alumni Name: " << newAlumni.getAlumniName() << endl;
        printf("Alumni Grade: %.2f \n", newAlumni.getAlumniGrade());
        cout << "Alumni Position: " << newAlumni.getAlumniPosition() << endl;
    }
}

void Archivo:: deleteAlumniInFile( FILE *file ){

    int alumniIndexToSearch;
    cout << "write a number between 1 and 10: " << endl;
    cin >> alumniIndexToSearch;

    //Beacuse the index begin in 0
    alumniIndexToSearch--;

    Alumno newAlumni;
    fseek( file, sizeof(Alumno)*alumniIndexToSearch, SEEK_SET ); //from the begining
    fread( &newAlumni, sizeof(Alumno), 1, file );

    // DELETE_CODE value is -1
    newAlumni.setAlumniID(DELETE_CODE);
    fseek( file, sizeof(Alumno)*alumniIndexToSearch, SEEK_SET); //from the begining
    fwrite( &newAlumni, sizeof(Alumno), 1, file );

}


void Archivo:: modifyAlumniInFile( FILE *file ){

    int alumniIndexToSearch;
    cout << "write a number between 1 and 10: " << endl;
    cin >> alumniIndexToSearch;

    //Beacuse the index begin in 0
    alumniIndexToSearch--;

    Alumno newAlumni;
    fseek( file, sizeof( Alumno )*alumniIndexToSearch, SEEK_SET ); //from the begining
    fread( &newAlumni, sizeof( Alumno ), 1, file );

    //---- Modify all the information of the alumni

    int newID;
    cout << "Write a new ID: ";
    cin >> newID;
    newAlumni.setAlumniID( newID );

    fflush( stdin );

    cout << "Write a new name: ";

    char *newName = new char[MAX_NAME_LEN];
    fgets( newName, MAX_NAME_LEN, stdin );

    newAlumni.setAlumniName( newName );

    fflush( stdin );

    cout << "Write a new grade: ";
    float newGrade;
    cin >> newGrade;
    newAlumni.setAlumniGrade( newGrade );

    fseek( file, sizeof( Alumno )*alumniIndexToSearch, SEEK_SET ); //from the begining
    fwrite( &newAlumni, sizeof( Alumno ), 1, file );

}


void Archivo::printAlumniFile( FILE *file ){

    int i;
    for( i = 0; i < MAX_NUM_REGISTER; i++ ){

        Alumno alumniToPrint;
        fseek( file,sizeof( Alumno )*i, SEEK_SET );
        fread( &alumniToPrint, sizeof( Alumno ), 1, file );

        bool isAlumniDeleted = alumniToPrint.getAlumniID() == DELETE_CODE;
        if( isAlumniDeleted ){
              continue;
        }else{
            cout << "Alumni ID: " << alumniToPrint.getAlumniID() << "\n";
            cout << "Alumni Name: " << alumniToPrint.getAlumniName() << "\n";
            printf("Alumni Grade: %.2f \n", alumniToPrint.getAlumniGrade());
            cout << "Alumni position: " << alumniToPrint.getAlumniPosition();
            cout << "\n";
        }
    }

}

